// handlers/messages.js
const { loadCommands } = require("../lib/commandLoader");
let commandsCache = null;

// ุฑุฏูุฏ ูููุงุช ููุชุงุญูุฉ (ุงุฎุชูุงุฑู)
let keywordReplies = {};
try {
  keywordReplies = require("../config/keywords");
} catch (_) {
  keywordReplies = {};
}

/**
 * ูุฑูุฏ ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ ูุฑุฉ ูุงุญุฏุฉ ููุท ููู ูุญุงุฏุซุฉ
 * ูุณุชุฎุฏู Set ูู ุงูุฐุงูุฑุฉ ูุชุชุจุน ุงููุญุงุฏุซุงุช ุงูุชู ุฃูุฑุณูุช ููุง ุงูุฑุณุงูุฉ.
 * ููุงุญุธุฉ: ูุนุงุฏ ุถุจุทูุง ุนูุฏ ุฅุนุงุฏุฉ ุชุดุบูู ุงูุนูููุฉ (ููู ุณููู ููุจูู ููุนุธู ุงูุญุงูุงุช).
 */
const defaultHintSentChats = new Set();

/** ูุต ุงูุฑุณุงูุฉ ุงูุงูุชุฑุงุถูุฉ (ูุฑูุฉ ูุงุญุฏุฉ) */
const DEFAULT_HINT_TEXT = [
  "๐ ุฃููุงู ุจู! ุฃูุง ุจูุช ูุงุชุณุงุจ.",
  "",
  "ููุญุตูู ุนูู ูุงุฆูุฉ ุงูุฃูุงูุฑ ุฃุฑุณู: *ูุณุงุนุฏุฉ* ุฃู *halp*",
  "ูุฅู ููุช ุชุฑูุฏ ูุฑุงุณูุฉ ุงูุฏุนูุ ุฃุฑุณู ุงุณุชูุณุงุฑู ุงูุขู ูุณูุฑุฏ ุนููู ูู ุฃูุฑุจ ููุช ูููู. ๐",
].join("\n");

/**
 * ูุณุฌูู ูุณุชูุน ุงูุฑุณุงุฆู ููุทุจูู:
 * - ุฃูุงูุฑ ูู ูุฌูุฏ commands/ (ูู ููุฌูุฏ) ูุน ูุจุฏูู "!"
 * - ุฑุฏูุฏ ูููุงุช ููุชุงุญูุฉ ูู config/keywords.js (ุงุฎุชูุงุฑู)
 * - ุฃูุงูุฑ ูุฏูุฌุฉ ุจุณูุทุฉ ูู fallback
 * - ุฑุณุงูุฉ ุงูุชุฑุงุถูุฉ ุชูุฑุณู ูุฑุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ุนุฏู ุงูุชุทุงุจู ูุน ุฃู ุฃูุฑ/ูููุฉ
 */
module.exports = function registerMessageHandlers(sock, logger) {
  if (!commandsCache) {
    commandsCache = loadCommands(logger); // ุญููู ุฃูุงูุฑ commands/ ูุฑุฉ ูุงุญุฏุฉ
  }

  sock.ev.on("messages.upsert", async ({ messages }) => {
    try {
      if (!messages || !messages.length) return;
      const msg = messages[0];

      // ุชุฌุงูู ุฑุณุงุฆู ุงูุญุงูุฉ ูุงูุฑุณุงุฆู ูู ุงูุจูุช ููุณู
      if (msg.key?.remoteJid === "status@broadcast") return;
      if (msg.key?.fromMe) return;

      const chatId = msg.key.remoteJid;
      const isGroup = chatId?.endsWith("@g.us");
      const senderId = (msg.key?.participant || msg.key?.remoteJid || "").split(":")[0];

      // ุงุณุชุฎุฑุงุฌ ูุต ุงูุฑุณุงูุฉ ูู ุฃูุซุฑ ูู ููุน
      const body =
        msg.message?.conversation ||
        msg.message?.extendedTextMessage?.text ||
        msg.message?.imageMessage?.caption ||
        msg.message?.videoMessage?.caption ||
        msg.message?.documentMessage?.caption ||
        msg.message?.buttonsResponseMessage?.selectedDisplayText ||
        msg.message?.templateButtonReplyMessage?.selectedDisplayText ||
        "";

      const text = (body || "").trim();
      if (!text) return;

      const reply = (t) => sock.sendMessage(chatId, { text: t }, { quoted: msg });

      // 1) ูููุงุช ููุชุงุญูุฉ (case-insensitive)
      const lower = text.toLowerCase();
      if (keywordReplies[lower]) {
        await reply(keywordReplies[lower]);
        return;
      }

      // 2) ุฃูุงูุฑ ูู ูุฌูุฏ commands/ (ููุจู ุจุงูุจุงุฏุฆุฉ ูุจุฏูููุง)
      if (commandsCache && commandsCache.size > 0) {
        const [firstWord, ...args] = text.split(/\s+/);
        const key1 = firstWord.toLowerCase();                         // ููุง ูู
        const key2 = key1.startsWith("!") ? key1.slice(1) : "!" + key1; // ูุนููุณุฉ

        const mod = commandsCache.get(key1) || commandsCache.get(key2);
        if (mod && typeof mod.run === "function") {
          return mod.run({ sock, msg, args, logger, chatId, senderId, isGroup });
        }
      }

      // 3) Fallback ูุฃูุงูุฑ ูุฏูุฌุฉ ุจุณูุทุฉ ุจุงูุนุฑุจูุฉ
      const [cmd, ...args] = text.split(/\s+/);
      const argText = args.join(" ");
      const cmdLower = cmd.toLowerCase();

      switch (cmdLower) {
        case "!ุงุฎุชุจุงุฑ":
        case "ุงุฎุชุจุงุฑ":
        case "!ping":
        case "ping": {
          const ts = (msg.messageTimestamp || Math.floor(Date.now() / 1000)) * 1000;
          const latency = Date.now() - ts;
          await reply(`๐ ุงุฎุชุจุงุฑ ุงูุงุณุชุฌุงุจุฉ: ~${latency >= 0 ? latency : 0} ูููู ุซุงููุฉ`);
          return;
        }
        case "!ุงูููุช":
        case "ุงูููุช":
        case "!time":
        case "time": {
          await reply(`๐ ุงูููุช ุงูุญุงูู: ${new Date().toLocaleString("ar-EG", { timeZone: "Asia/Riyadh" })}`);
          return;
        }
        case "!id":
        case "id": {
          await reply(`๐ ุงููุญุงุฏุซุฉ: ${chatId}\n๐ค ุงููุฑุณู: ${senderId}\n๐ฅ ูุฌููุนุฉ: ${isGroup ? "ูุนู" : "ูุง"}`);
          return;
        }
        case "!echo":
        case "echo": {
          if (!argText) return reply("ุงูุชุจ ููุฐุง: `!echo ูุต`");
          await reply(argText);
          return;
        }
        case "!ูุณุงุนุฏุฉ":
        case "ูุณุงุนุฏุฉ":
        case "!help":
        case "help":
        case "halp": {
          await reply(
            [
              "๐ค *ูุงุฆูุฉ ุฃูุงูุฑ ุงูุจูุช*",
              "",
              "๐ !ูุฑุญุจุง / ูุฑุญุจุง โ ููุชุฑุญูุจ",
              "๐ !ุงุฎุชุจุงุฑ / ุงุฎุชุจุงุฑ โ ููุงุณ ุงูุงุณุชุฌุงุจุฉ",
              "๐ !ุงูููุช / ุงูููุช โ ุนุฑุถ ุงูููุช ุงูุญุงูู",
              "๐ !id / id โ ุนุฑุถ ูุนุฑู ุงููุญุงุฏุซุฉ ูุงููุฑุณู",
              "๐ข !echo / echo <ูุต> โ ููุฑุฑ ุงููุต",
              "๐ผ๏ธ !ุตูุฑุฉ / ุตูุฑุฉ <ุฑุงุจุท> โ ุฅุฑุณุงู ุตูุฑุฉ ูู ุฑุงุจุท",
              "๐ !ุชุตููุช / ุชุตููุช ุณุคุงู | ุฎูุงุฑ1, ุฎูุงุฑ2 โ ุฅูุดุงุก ุชุตููุช",
            ].join("\n")
          );
          return;
        }
        // ูุง default ููุง โ ุณููุชูู ุฅูู ุงูุฑุณุงูุฉ ุงูุงูุชุฑุงุถูุฉ ุงูุฃุญุงุฏูุฉ ุจุงูุฃุณูู
      }

      // 4) ุงูุฑุณุงูุฉ ุงูุงูุชุฑุงุถูุฉ โ ุชูุฑุณู ูุฑุฉ ูุงุญุฏุฉ ููุท ููู ูุญุงุฏุซุฉ
      if (!defaultHintSentChats.has(chatId)) {
        await reply(DEFAULT_HINT_TEXT);
        defaultHintSentChats.add(chatId);
      }
      // ุฅุฐุง ูุงูุช ูุฏ ุฃุฑุณูุช ุณุงุจููุง ูููุณ ุงููุญุงุฏุซุฉุ ูุง ููุนู ุดูุฆูุง ูุชุฌูุจ ุงูุชุดููุด.

    } catch (err) {
      logger.error({ err, stack: err?.stack }, "messages.upsert handler error");
    }
  });
};
